/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.telefonica.gal.provisionApi.api;

import com.telefonica.gal.provisionApi.model.InlineResponse200;
import com.telefonica.gal.provisionApi.model.InlineResponse2001;
import com.telefonica.gal.provisionApi.model.InlineResponse400;
import com.telefonica.gal.provisionApi.model.InlineResponse401;
import com.telefonica.gal.provisionApi.model.InlineResponse403;
import com.telefonica.gal.provisionApi.model.InlineResponse404;
import com.telefonica.gal.provisionApi.model.InlineResponse4041;
import com.telefonica.gal.provisionApi.model.InlineResponse409;
import com.telefonica.gal.provisionApi.model.InlineResponse500;
import com.telefonica.gal.provisionApi.model.ProvisionOttUser;
import com.telefonica.gal.provisionApi.model.ProvisionOttUserBASEClientSegment;
import com.telefonica.gal.provisionApi.model.ProvisionOttUserBASEClientSegmentREQ;
import com.telefonica.gal.provisionApi.model.SubscribedProduct;
import com.telefonica.gal.provisionApi.model.SubscribedProductPUT;
import com.telefonica.gal.provisionApi.model.CDBProvisionRequest;
import com.telefonica.gal.provisionApi.model.Voucher;
import com.telefonica.gal.provisionApi.model.VoucherWRITE;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-16T10:44:28.456817200+02:00[Europe/Paris]")

@Validated
@Api(value = "provision", description = "the provision API")
public interface ProvisionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Cancel/Delete a user", nickname = "provisionOTTAdminCodeDelete", notes = "This operation allows requesting the deletion of a given user. Actually, this only means that this user will be marked with the \"cancelled\" state\\: it will not be immediately deleted from the system.  This operation will return an error if the user to be cancelled does not exist anymore (i.e. it has already been removed from the system after having been X days in the cancelled state).   * However, if the user to be cancelled still exists in the platform but with a \"cancelled\" state, the operation will be directly successful (with no need to modify the user). ", tags={ "OTT User Provision", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> provisionOTTAdminCodeDelete(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Obtain the properties of a user", nickname = "provisionOTTAdminCodeGet", notes = "This operation allows obtaining the parameters of a given user. ", response = ProvisionOttUser.class, tags={ "OTT User Provision", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProvisionOttUser.class),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ProvisionOttUser> provisionOTTAdminCodeGet(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Modify a user", nickname = "provisionOTTAdminCodePatch", notes = "This operation allows modifying certain parameters of a given user.   * NOTE\\: Cancelled users cannot be modified using this request. ", response = ProvisionOttUser.class, tags={ "OTT User Provision", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProvisionOttUser.class),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 409, message = "Conflict ", response = InlineResponse409.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<ProvisionOttUser> provisionOTTAdminCodePatch(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode,@ApiParam(value = "A JSON object containing additional parameters to modify a user." ,required=true )  @Valid @RequestBody CDBProvisionRequest UNKNOWN_BASE_TYPE) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get the list of voucher purchases of a user", nickname = "provisionOTTAdminCodePurchasesVouchersGet", notes = "This operation allows a BSS/OSS system to obtain the list of vouchers purchased by an OTT user.   * This operation does NOT support Partial response, Sorting nor Filtering. ", response = InlineResponse2001.class, tags={ "Purchased Vouchers of an OTT User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = InlineResponse2001.class),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}/purchases/vouchers",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2001> provisionOTTAdminCodePurchasesVouchersGet(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Remove a voucher purchase from a user", nickname = "provisionOTTAdminCodePurchasesVouchersIdDelete", notes = "This operation allows a BSS/OSS system to remove a voucher from an OTT user that could have it purchased (aka, voucher purchase cancellation operation). This operation may be only applied on vouchers that have NOT been activated yet.   * NOTE\\: Cancelled users cannot be modified using this request.    A single user may own the same voucher several times simultaneously. For that reason, in this API each purchased voucher has 2 identifiers: one is the commercial code of the purchased product and the other is the ID of the purchase. So, the same user may have several \"purchases\" (each one with a different \"<i>id</i>\") of the same \"product\" (all of them would have the same \"<i>code</i>\"). * When trying to cancel a specific voucher-purchase with this method, the \"<i>id</i>\" of the \"purchase\" is sent. ", tags={ "Purchased Vouchers of an OTT User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}/purchases/vouchers/{id}",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> provisionOTTAdminCodePurchasesVouchersIdDelete(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode,@ApiParam(value = "Unique identifier of the purchase. Please, note that this is NOT the product ID of the voucher. ",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Obtain the properties of a voucher (belonging to a user)", nickname = "provisionOTTAdminCodePurchasesVouchersIdGet", notes = "This operation allows a BSS/OSS system to obtain the properties of a certain voucher purchased by a user.   * This operation does NOT support Partial response    A single user may own the same voucher several times simultaneously. For that reason, in this API each purchased voucher has 2 identifiers: one is the commercial code of the purchased product and the other is the ID of the purchase. So, the same user may have several \"purchases\" (each one with a different \"<i>id</i>\") of the same \"product\" (all of them would have the same \"<i>code</i>\"). * When looking for a specific purchased voucher with this method, the \"<i>id</i>\" of the \"purchase\" is sent. So, if the server finds that purchase, it will return the voucher information, including the \"<i>code</i>\" of the crresponding product.    ", response = Voucher.class, tags={ "Purchased Vouchers of an OTT User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Voucher.class),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}/purchases/vouchers/{id}",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Voucher> provisionOTTAdminCodePurchasesVouchersIdGet(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode,@ApiParam(value = "Unique identifier of the purchase. Please, note that this is NOT the product ID of the voucher. ",required=true) @PathVariable("id") String id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Add a voucher to a user", nickname = "provisionOTTAdminCodePurchasesVouchersPost", notes = "This operation allows a BSS/OSS system to add a voucher product to an OTT user (aka, voucher purchase operation). With this operation, any kind of voucher can be purchased (operator and user vouchers).  A single user may own the same voucher several times simultaneously. For that reason, in this API each purchased voucher has 2 identifiers: one is the commercial code of the purchased product and the other is the ID of the purchase. So, the same user may have several \"purchases\" (each one with a different \"<i>id</i>\") of the same \"product\" (all of them would have the same \"<i>code</i>\"). * When purchasing a voucher with this method, the \"<i>code</i>\" of the voucher is sent. With that, the server creates the purchase as a new REST resource, with its own \"<i>id</i>\".      (i) NOTE\\: Cancelled users cannot be modified using this request. ", tags={ "Purchased Vouchers of an OTT User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created  Location: http://api.imagenio.telefonica.net/cdbprovision/rest/provision/OTT/codigo1234/purchases/vouchers/1234 "),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}/purchases/vouchers",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> provisionOTTAdminCodePurchasesVouchersPost(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode,@ApiParam(value = "A JSON object containing additional information regarding this specifc operation." ,required=true )  @Valid @RequestBody CDBProvisionRequest UNKNOWN_BASE_TYPE) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Create a user", nickname = "provisionOTTAdminCodePut", notes = "This operation allows a BSS/OSS system to create an OTT user. Some notes about existing users\\:   * If a user already exists with the same identifier and is not CANCELLED, an error is returned.   * If a user already exists with the same identifier and is CANCELLED, the request may be succesful\\: it would be a \"recover\" request.     * In that case, the user would be recovered but as a new user (the values would be taken from this request, not from the pre-existent values for the user). ", tags={ "OTT User Provision", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created  Location: http://api.imagenio.telefonica.net/cdbprovision/rest/provision/OTT/codigo1234 "),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse4041.class),
        @ApiResponse(code = 409, message = "Conflict ", response = InlineResponse409.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> provisionOTTAdminCodePut(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode,@ApiParam(value = "A JSON object containing additional parameters to create a user." ,required=true )  @Valid @RequestBody CDBProvisionRequest UNKNOWN_BASE_TYPE) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Remove a product from a user", nickname = "provisionOTTAdminCodeSubscribedProductsCodeDelete", notes = "This operation allows a BSS/OSS system to remove a product from an OTT user (aka, product un-subscription operation).   * NOTE\\: Cancelled users cannot be modified using this request. ", tags={ "Subscribed Products of an OTT User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}/subscribedProducts/{code}",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> provisionOTTAdminCodeSubscribedProductsCodeDelete(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode,@ApiParam(value = "Unique identifier of the product in operator's BSS/OSS systems (aka \"Commercial code\"). ",required=true) @PathVariable("code") String code) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Obtain the properties of a product (belonging to a user)", nickname = "provisionOTTAdminCodeSubscribedProductsCodeGet", notes = "This operation allows a BSS/OSS system to obtain the properties of a product (belonging to an OTT user).   * This operation does NOT support Partial response ", response = SubscribedProduct.class, tags={ "Subscribed Products of an OTT User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SubscribedProduct.class),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}/subscribedProducts/{code}",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<SubscribedProduct> provisionOTTAdminCodeSubscribedProductsCodeGet(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode,@ApiParam(value = "Unique identifier of the product in operator's BSS/OSS systems (aka \"Commercial code\"). ",required=true) @PathVariable("code") String code) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Add a product to a user", nickname = "provisionOTTAdminCodeSubscribedProductsCodePut", notes = "This operation allows a BSS/OSS system to add a product to an OTT user (aka, product subscription operation).  By using the \"<i>pendingConsolidation</i>\" flag, the BSS/OSS system may decide whether the product must be CONSOLIDATED, or not, for the user.    * NOTE\\: Cancelled users cannot be modified using this request. ", tags={ "Subscribed Products of an OTT User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created  Location: http://api.imagenio.telefonica.net/cdbprovision/rest/provision/OTT/codigo1234/subscribedProducts/EXTCOD125 "),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 409, message = "Conflict ", response = InlineResponse409.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}/subscribedProducts/{code}",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> provisionOTTAdminCodeSubscribedProductsCodePut(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode,@ApiParam(value = "Unique identifier of the product in operator's BSS/OSS systems (aka \"Commercial code\"). ",required=true) @PathVariable("code") String code,@ApiParam(value = "A JSON object containing additional information regarding this specifc operation."  )  @Valid @RequestBody CDBProvisionRequest UNKNOWN_BASE_TYPE) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get the list of products of a user", nickname = "provisionOTTAdminCodeSubscribedProductsGet", notes = "This operation allows a BSS/OSS system to obtain the list of products subscribed by an OTT user.   * This operation does NOT support Partial response, Sorting nor Filtering. ", response = InlineResponse200.class, tags={ "Subscribed Products of an OTT User", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Bad request * NOTE: Applicable for syntax errors in general, wrong parameter value format, etc. ", response = InlineResponse400.class),
        @ApiResponse(code = 401, message = "Unauthorized ", response = InlineResponse401.class),
        @ApiResponse(code = 403, message = "Forbidden ", response = InlineResponse403.class),
        @ApiResponse(code = 404, message = "Not Found ", response = InlineResponse404.class),
        @ApiResponse(code = 500, message = "Internal server error", response = InlineResponse500.class),
        @ApiResponse(code = 503, message = "Service Unavailable * NOTE: the server is currently unavailable because it is overloaded or down for maintenance. "),
        @ApiResponse(code = 504, message = "Gateway Timeout * NOTE: Applicable when a FE Proxy is put in place. ") })
    @RequestMapping(value = "/provision/OTT/{adminCode}/subscribedProducts",
        produces = { "application/vnd.miviewtv.v1+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse200> provisionOTTAdminCodeSubscribedProductsGet(@ApiParam(value = "Unique identifier of the user in operator's network and BSS/OSS systems. ",required=true) @PathVariable("adminCode") String adminCode) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    ApiUtil.setExampleResponse(request, "", "");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
